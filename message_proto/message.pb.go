// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.0
// source: message.proto

package message_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                                                                                                                                                                                       string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	VideoID                                                                                                                                                                                    string `protobuf:"bytes,2,opt,name=videoID,proto3" json:"videoID,omitempty"`
	Links                                                                                                                                                                                      string `protobuf:"bytes,3,opt,name=links,proto3" json:"links,omitempty"`
	Atype                                                                                                                                                                                      string `protobuf:"bytes,4,opt,name=atype,proto3" json:"atype,omitempty"`
	AvideoID                                                                                                                                                                                   string `protobuf:"bytes,5,opt,name=avideoID,proto3" json:"avideoID,omitempty"`
	Alinks                                                                                                                                                                                     string `protobuf:"bytes,6,opt,name=alinks,proto3" json:"alinks,omitempty"`
	Btype                                                                                                                                                                                      string `protobuf:"bytes,7,opt,name=btype,proto3" json:"btype,omitempty"`
	BvideoID                                                                                                                                                                                   string `protobuf:"bytes,8,opt,name=bvideoID,proto3" json:"bvideoID,omitempty"`
	Blinks                                                                                                                                                                                     string `protobuf:"bytes,9,opt,name=blinks,proto3" json:"blinks,omitempty"`
	Batype                                                                                                                                                                                     string `protobuf:"bytes,10,opt,name=batype,proto3" json:"batype,omitempty"`
	BavideoID                                                                                                                                                                                  string `protobuf:"bytes,11,opt,name=bavideoID,proto3" json:"bavideoID,omitempty"`
	Balinks                                                                                                                                                                                    string `protobuf:"bytes,12,opt,name=balinks,proto3" json:"balinks,omitempty"`
	Ctype                                                                                                                                                                                      string `protobuf:"bytes,13,opt,name=ctype,proto3" json:"ctype,omitempty"`
	CvideoID                                                                                                                                                                                   string `protobuf:"bytes,14,opt,name=cvideoID,proto3" json:"cvideoID,omitempty"`
	Clinks                                                                                                                                                                                     string `protobuf:"bytes,15,opt,name=clinks,proto3" json:"clinks,omitempty"`
	CatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                                                                                string `protobuf:"bytes,16,opt,name=catype_catype_catype_catype_catype_catype_catype_,json=catypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"catype_catype_catype_catype_catype_catype_catype_,omitempty"`
	CavideoID                                                                                                                                                                                  string `protobuf:"bytes,17,opt,name=cavideoID,proto3" json:"cavideoID,omitempty"`
	Calinks                                                                                                                                                                                    string `protobuf:"bytes,18,opt,name=calinks,proto3" json:"calinks,omitempty"`
	Cbtype                                                                                                                                                                                     string `protobuf:"bytes,19,opt,name=cbtype,proto3" json:"cbtype,omitempty"`
	CbvideoID                                                                                                                                                                                  string `protobuf:"bytes,20,opt,name=cbvideoID,proto3" json:"cbvideoID,omitempty"`
	DclinkscatypeCatypeCatypeCatypeCatypeCadclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeTypeCatypeCatypeCatypeCaaatypeCatypeCatypeCatypeCatype_  string `protobuf:"bytes,21,opt,name=dclinkscatype_catype_catype_catype_catype_cadclinkscatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_type_catype_catype_catype_caaatype_catype_catype_catype_catype_,json=dclinkscatypeCatypeCatypeCatypeCatypeCadclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeTypeCatypeCatypeCatypeCaaatypeCatypeCatypeCatypeCatype,proto3" json:"dclinkscatype_catype_catype_catype_catype_cadclinkscatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_type_catype_catype_catype_caaatype_catype_catype_catype_catype_,omitempty"`
	DclinkscatypeCatypeCatypeCatypeCatydclinkscatypeCatypeCatypeCatypeCatypeCatpeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypePeCatypeCatypeCatypeCatypeCataaaaypeCatypeCatypeCatypeCatype_ string `protobuf:"bytes,22,opt,name=dclinkscatype_catype_catype_catype_catydclinkscatype_catype_catype_catype_catype_catpe_catype_catype_catype_catype_catype_catype_catype_catype_pe_catype_catype_catype_catype_cataaaaype_catype_catype_catype_catype_,json=dclinkscatypeCatypeCatypeCatypeCatydclinkscatypeCatypeCatypeCatypeCatypeCatpeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypePeCatypeCatypeCatypeCatypeCataaaaypeCatypeCatypeCatypeCatype,proto3" json:"dclinkscatype_catype_catype_catype_catydclinkscatype_catype_catype_catype_catype_catpe_catype_catype_catype_catype_catype_catype_catype_catype_pe_catype_catype_catype_catype_cataaaaype_catype_catype_catype_catype_,omitempty"`
	DclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                               string `protobuf:"bytes,23,opt,name=dclinkscatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_,json=dclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"dclinkscatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_,omitempty"`
	Cbalinks                                                                                                                                                                                   string `protobuf:"bytes,24,opt,name=cbalinks,proto3" json:"cbalinks,omitempty"`
	Dblinks                                                                                                                                                                                    string `protobuf:"bytes,25,opt,name=dblinks,proto3" json:"dblinks,omitempty"`
	Dbatype                                                                                                                                                                                    string `protobuf:"bytes,26,opt,name=dbatype,proto3" json:"dbatype,omitempty"`
	DbavideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                                                                      string `protobuf:"bytes,27,opt,name=dbavideoIDcatype_catype_catype_catype_catype_catype_catype_,json=dbavideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"dbavideoIDcatype_catype_catype_catype_catype_catype_catype_,omitempty"`
	DbalinkscatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                                                                        string `protobuf:"bytes,28,opt,name=dbalinkscatype_catype_catype_catype_catype_catype_catype_,json=dbalinkscatypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"dbalinkscatype_catype_catype_catype_catype_catype_catype_,omitempty"`
	DctypecatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                                                                          string `protobuf:"bytes,29,opt,name=dctypecatype_catype_catype_catype_catype_catype_catype_,json=dctypecatypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"dctypecatype_catype_catype_catype_catype_catype_catype_,omitempty"`
	DcvideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                                                                       string `protobuf:"bytes,30,opt,name=dcvideoIDcatype_catype_catype_catype_catype_catype_catype_,json=dcvideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"dcvideoIDcatype_catype_catype_catype_catype_catype_catype_,omitempty"`
	DclinksbcatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                              string `protobuf:"bytes,31,opt,name=dclinksbcatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_,json=dclinksbcatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"dclinksbcatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_,omitempty"`
	Dcatype                                                                                                                                                                                    string `protobuf:"bytes,32,opt,name=dcatype,proto3" json:"dcatype,omitempty"`
	DcavidecatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeOID                                                   string `protobuf:"bytes,33,opt,name=dcavidecatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_oID,json=dcavidecatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeOID,proto3" json:"dcavidecatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_oID,omitempty"`
	DcalicatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeNks                                                                                               string `protobuf:"bytes,34,opt,name=dcalicatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_nks,json=dcalicatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeNks,proto3" json:"dcalicatype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_nks,omitempty"`
	DcbtycatypeCatypeCatypeCatypeCatypeCatypeCatypePe                                                                                                                                          string `protobuf:"bytes,35,opt,name=dcbtycatype_catype_catype_catype_catype_catype_catype_pe,json=dcbtycatypeCatypeCatypeCatypeCatypeCatypeCatypePe,proto3" json:"dcbtycatype_catype_catype_catype_catype_catype_catype_pe,omitempty"`
	DcbvideoID                                                                                                                                                                                 string `protobuf:"bytes,36,opt,name=dcbvideoID,proto3" json:"dcbvideoID,omitempty"`
	DcblicatypeCatypeCatypeCatypeCatypeCatypeCatypeNks                                                                                                                                         string `protobuf:"bytes,37,opt,name=dcblicatype_catype_catype_catype_catype_catype_catype_nks,json=dcblicatypeCatypeCatypeCatypeCatypeCatypeCatypeNks,proto3" json:"dcblicatype_catype_catype_catype_catype_catype_catype_nks,omitempty"`
	Dcbatype                                                                                                                                                                                   string `protobuf:"bytes,38,opt,name=dcbatype,proto3" json:"dcbatype,omitempty"`
	DclinkscattypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_                                                                                              string `protobuf:"bytes,39,opt,name=dclinkscattype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_,json=dclinkscattypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype,proto3" json:"dclinkscattype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_catype_,omitempty"`
	Dcbalinks                                                                                                                                                                                  string `protobuf:"bytes,40,opt,name=dcbalinks,proto3" json:"dcbalinks,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Message) GetVideoID() string {
	if x != nil {
		return x.VideoID
	}
	return ""
}

func (x *Message) GetLinks() string {
	if x != nil {
		return x.Links
	}
	return ""
}

func (x *Message) GetAtype() string {
	if x != nil {
		return x.Atype
	}
	return ""
}

func (x *Message) GetAvideoID() string {
	if x != nil {
		return x.AvideoID
	}
	return ""
}

func (x *Message) GetAlinks() string {
	if x != nil {
		return x.Alinks
	}
	return ""
}

func (x *Message) GetBtype() string {
	if x != nil {
		return x.Btype
	}
	return ""
}

func (x *Message) GetBvideoID() string {
	if x != nil {
		return x.BvideoID
	}
	return ""
}

func (x *Message) GetBlinks() string {
	if x != nil {
		return x.Blinks
	}
	return ""
}

func (x *Message) GetBatype() string {
	if x != nil {
		return x.Batype
	}
	return ""
}

func (x *Message) GetBavideoID() string {
	if x != nil {
		return x.BavideoID
	}
	return ""
}

func (x *Message) GetBalinks() string {
	if x != nil {
		return x.Balinks
	}
	return ""
}

func (x *Message) GetCtype() string {
	if x != nil {
		return x.Ctype
	}
	return ""
}

func (x *Message) GetCvideoID() string {
	if x != nil {
		return x.CvideoID
	}
	return ""
}

func (x *Message) GetClinks() string {
	if x != nil {
		return x.Clinks
	}
	return ""
}

func (x *Message) GetCatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.CatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetCavideoID() string {
	if x != nil {
		return x.CavideoID
	}
	return ""
}

func (x *Message) GetCalinks() string {
	if x != nil {
		return x.Calinks
	}
	return ""
}

func (x *Message) GetCbtype() string {
	if x != nil {
		return x.Cbtype
	}
	return ""
}

func (x *Message) GetCbvideoID() string {
	if x != nil {
		return x.CbvideoID
	}
	return ""
}

func (x *Message) GetDclinkscatypeCatypeCatypeCatypeCatypeCadclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeTypeCatypeCatypeCatypeCaaatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DclinkscatypeCatypeCatypeCatypeCatypeCadclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeTypeCatypeCatypeCatypeCaaatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDclinkscatypeCatypeCatypeCatypeCatydclinkscatypeCatypeCatypeCatypeCatypeCatpeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypePeCatypeCatypeCatypeCatypeCataaaaypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DclinkscatypeCatypeCatypeCatypeCatydclinkscatypeCatypeCatypeCatypeCatypeCatpeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypePeCatypeCatypeCatypeCatypeCataaaaypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DclinkscatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetCbalinks() string {
	if x != nil {
		return x.Cbalinks
	}
	return ""
}

func (x *Message) GetDblinks() string {
	if x != nil {
		return x.Dblinks
	}
	return ""
}

func (x *Message) GetDbatype() string {
	if x != nil {
		return x.Dbatype
	}
	return ""
}

func (x *Message) GetDbavideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DbavideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDbalinkscatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DbalinkscatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDctypecatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DctypecatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDcvideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DcvideoIDcatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDclinksbcatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DclinksbcatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDcatype() string {
	if x != nil {
		return x.Dcatype
	}
	return ""
}

func (x *Message) GetDcavidecatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeOID() string {
	if x != nil {
		return x.DcavidecatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeOID
	}
	return ""
}

func (x *Message) GetDcalicatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeNks() string {
	if x != nil {
		return x.DcalicatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeNks
	}
	return ""
}

func (x *Message) GetDcbtycatypeCatypeCatypeCatypeCatypeCatypeCatypePe() string {
	if x != nil {
		return x.DcbtycatypeCatypeCatypeCatypeCatypeCatypeCatypePe
	}
	return ""
}

func (x *Message) GetDcbvideoID() string {
	if x != nil {
		return x.DcbvideoID
	}
	return ""
}

func (x *Message) GetDcblicatypeCatypeCatypeCatypeCatypeCatypeCatypeNks() string {
	if x != nil {
		return x.DcblicatypeCatypeCatypeCatypeCatypeCatypeCatypeNks
	}
	return ""
}

func (x *Message) GetDcbatype() string {
	if x != nil {
		return x.Dcbatype
	}
	return ""
}

func (x *Message) GetDclinkscattypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_() string {
	if x != nil {
		return x.DclinkscattypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatypeCatype_
	}
	return ""
}

func (x *Message) GetDcbalinks() string {
	if x != nil {
		return x.Dcbalinks
	}
	return ""
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94,
	0x1b, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x65, 0x0a, 0x31,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2a, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x62, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x62, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x44, 0x12, 0x98, 0x03, 0x0a, 0xd4, 0x01, 0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x61, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0xb8, 0x01, 0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x64, 0x63, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x61, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x9a, 0x03, 0x0a,
	0xd5, 0x01, 0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x61, 0x61, 0x61, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0xb9, 0x01,
	0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x50, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x61, 0x61, 0x61, 0x61, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x69, 0x64, 0x63,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x5b, 0x64,
	0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x62,
	0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x62,
	0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x62, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x62, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x62, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x3b, 0x64, 0x62,
	0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x34, 0x64, 0x62, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x39, 0x64, 0x62, 0x61, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x32, 0x64, 0x62, 0x61, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x37,
	0x64, 0x63, 0x74, 0x79, 0x70, 0x65, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x30, 0x64,
	0x63, 0x74, 0x79, 0x70, 0x65, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x77, 0x0a, 0x3a, 0x64, 0x63, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x33, 0x64, 0x63, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x6a, 0x64, 0x63, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x62, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x5c, 0x64,
	0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x62, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0xb1, 0x02, 0x0a, 0x9d, 0x01, 0x64, 0x63, 0x61, 0x76, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x88,
	0x01, 0x64, 0x63, 0x61, 0x76, 0x69, 0x64, 0x65, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x49, 0x44, 0x12, 0xd0, 0x01, 0x0a, 0x6a, 0x64, 0x63,
	0x61, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6b, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x5c,
	0x64, 0x63, 0x61, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6b, 0x73, 0x12, 0x73, 0x0a, 0x38,
	0x64, 0x63, 0x62, 0x74, 0x79, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x31,
	0x64, 0x63, 0x62, 0x74, 0x79, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x50,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x63, 0x62, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x63, 0x62, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x44, 0x12, 0x75, 0x0a, 0x39, 0x64, 0x63, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6b, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x32, 0x64, 0x63, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x63, 0x62, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x63, 0x62, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x12, 0xd0, 0x01, 0x0a, 0x6a, 0x64, 0x63, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x63, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x5c, 0x64, 0x63, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x63, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x63, 0x62, 0x61, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x63, 0x62, 0x61,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_message_proto_goTypes = []interface{}{
	(*Message)(nil), // 0: message_proto.Message
}
var file_message_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
